name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read
  security-events: write

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: 🔧 Make Maven Wrapper Executable
      working-directory: ./backend
      run: chmod +x mvnw
        
    - name: 🏗️ Build with Maven
      working-directory: ./backend
      run: ./mvnw clean compile -B
      
    - name: 🧪 Run Tests
      working-directory: ./backend
      run: ./mvnw test -B
      
    - name: 📊 Generate Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Maven Tests
        path: 'backend/target/surefire-reports/TEST-*.xml'
        reporter: java-junit
        fail-on-error: false
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📈 Code Coverage
      working-directory: ./backend
      run: ./mvnw jacoco:report
      if: success() || failure()
      
    - name: 📤 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success() || failure()
      with:
        file: ./backend/target/site/jacoco/jacoco.xml
        fail_ci_if_error: false

  security:
    name: 🔐 Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: success() || failure()
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: 🔧 Make Maven Wrapper Executable
      working-directory: ./backend
      run: chmod +x mvnw
      
    - name: 📦 Cache OWASP Database
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository/org/owasp/dependency-check-data
        key: ${{ runner.os }}-owasp-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-owasp-
        
    - name: 🔐 OWASP Dependency Check
      working-directory: ./backend
      run: |
        # Configurar timeout e otimizações
        ./mvnw org.owasp:dependency-check-maven:check -B \
          -Dformat=HTML \
          -DfailBuildOnCVSS=7 \
          -DskipProvidedScope=true \
          -DskipRuntimeScope=false \
          -DskipSystemScope=true \
          -DskipTestScope=true \
          -DsuppressLocalNodeAuditor=true \
          -DsuppressRetireJSAuditor=true \
          -DsuppressNuspecAuditor=true \
          -DsuppressAssemblyAuditor=true \
          -DsuppressCMakeAuditor=true \
          -DsuppressSwiftPackageManagerAuditor=true \
          -DsuppressArchiveAuditor=true \
          -DsuppressNodeAuditor=true \
          -DsuppressPyDistributionAuditor=true \
          -DsuppressPyPackageAuditor=true \
          -DsuppressRubygemsAuditor=true \
          -DsuppressComposerAuditor=true \
          -DsuppressCocoapodsAuditor=true
      continue-on-error: true
      timeout-minutes: 10
      
    - name: 📤 Upload Security Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: backend/target/dependency-check-report.html

  build:
    name: 🐳 Build & Test
    runs-on: ubuntu-latest
    needs: [test]
    if: success()
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: 🔧 Make Maven Wrapper Executable
      working-directory: ./backend
      run: chmod +x mvnw
        
    - name: 🏗️ Build Application
      working-directory: ./backend
      run: ./mvnw clean package -DskipTests -B
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Docker Image
      working-directory: ./backend
      run: |
        docker build -t pontos-umbanda:latest .
        docker images
        
    - name: 🧪 Test Docker Container
      working-directory: ./backend
      run: |
        docker run -d --name test-container -p 8080:8080 pontos-umbanda:latest
        sleep 30
        
        # Health check with retry
        for i in {1..5}; do
          if curl -f http://localhost:8080/actuator/health; then
            echo "✅ Health check passed!"
            break
          else
            echo "⏳ Health check failed, attempt $i/5"
            sleep 10
          fi
        done
        
        docker logs test-container
        docker stop test-container
        docker rm test-container

  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' && success()
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: 🔧 Make Maven Wrapper Executable
      working-directory: ./backend
      run: chmod +x mvnw
        
    - name: 🚀 Start Application
      working-directory: ./backend
      run: |
        ./mvnw spring-boot:run -Dspring-boot.run.profiles=dev -Dserver.port=8080 &
        
        # Wait for application to start
        for i in {1..12}; do
          if curl -f http://localhost:8080/actuator/health 2>/dev/null; then
            echo "✅ Application started successfully!"
            break
          else
            echo "⏳ Waiting for application to start... ($i/12)"
            sleep 10
          fi
        done
        
    - name: ⚡ Install Artillery
      run: npm install -g artillery@latest
      
    - name: 🎯 Run Load Tests
      run: |
        cat > loadtest.yml << EOF
        config:
          target: 'http://localhost:8080'
          phases:
            - duration: 30
              arrivalRate: 2
        scenarios:
          - name: 'Health Check'
            requests:
              - get:
                  url: '/actuator/health'
        EOF
        
        artillery run loadtest.yml
