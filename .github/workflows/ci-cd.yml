name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: 🔍 Verify Java Installation
      run: |
        java -version
        javac -version
        echo "JAVA_HOME: $JAVA_HOME"
        
    - name: 🏗️ Build with Maven
      working-directory: ./backend
      run: ./mvnw clean compile -B
      
    - name: 🧪 Run Tests
      working-directory: ./backend
      run: ./mvnw test -B
      
    - name: 📊 Generate Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: backend/target/surefire-reports/*.xml
        reporter: java-junit
        
    - name: 📈 Code Coverage
      working-directory: ./backend
      run: ./mvnw jacoco:report
      
    - name: 📤 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/target/site/jacoco/jacoco.xml
        fail_ci_if_error: false

  security:
    name: 🔐 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: 🔐 OWASP Dependency Check
      working-directory: ./backend
      run: ./mvnw org.owasp:dependency-check-maven:check -B
      continue-on-error: true
      
    - name: 📤 Upload Security Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: backend/target/dependency-check-report.html

  build:
    name: 🐳 Build Docker
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Docker Image
      working-directory: ./backend
      run: |
        docker build -t pontos-umbanda:latest .
        docker images
        
    - name: 🧪 Test Docker Container
      working-directory: ./backend
      run: |
        docker run -d --name test-container -p 8080:8080 pontos-umbanda:latest
        sleep 30
        curl -f http://localhost:8080/actuator/health || exit 1
        docker logs test-container
        docker stop test-container
        docker rm test-container

  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: 🚀 Start Application
      working-directory: ./backend
      run: |
        ./mvnw spring-boot:run -Dspring-boot.run.profiles=dev &
        sleep 30
        
    - name: ⚡ Install Artillery
      run: npm install -g artillery@latest
      
    - name: 🎯 Run Load Tests
      run: |
        echo "config:
          target: 'http://localhost:8080'
          phases:
            - duration: 60
              arrivalRate: 5
        scenarios:
          - name: 'Health Check'
            requests:
              - get:
                  url: '/actuator/health'" > loadtest.yml
        artillery run loadtest.yml
